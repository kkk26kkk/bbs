<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Comment">
	<insert id="insertComment" parameterType="com.kkk26kkk.bbs.model.CommentVo">
		INSERT INTO TB_COMMENT
				(COMMENT_ID, ARTICLE_ID, USER_ID, USER_NAME,
				CONTENTS, REG_DTM, CODE)
		VALUES	(#{commentId}, #{articleId}, #{userId}, #{userName},
				 #{contents}, sysdate, #{code})
	</insert>
	
	<select id="getComment" parameterType="String" resultType="com.kkk26kkk.bbs.model.Comment">
		SELECT
				COMMENT_ID
			  , ARTICLE_ID
			  , USER_ID
			  , USER_NAME
			  , CONTENTS
			  , REG_DTM
		FROM	TB_COMMENT
		WHERE	COMMENT_ID = #{commentId}
	</select>
	
	<select id="getCommentList" parameterType="com.kkk26kkk.bbs.model.CommentParam" resultType="com.kkk26kkk.bbs.model.Comment">
		SELECT 
                A.COMMENT_ID, A.ARTICLE_ID, A.USER_ID, A.USER_NAME , A.PARENT_ID, A.REG_DTM,
        CASE    WHEN (A.USER_ID != #{userId} AND B.USER_ID != #{userId}) AND A.CODE = '20'
                    THEN NULL
                -- WHEN 신고 댓글
                ELSE  A.CONTENTS
        END     CONTENTS
		FROM    TB_COMMENT A
		INNER JOIN
		        TB_ARTICLE B
		ON A.ARTICLE_ID = B.ARTICLE_ID
		WHERE A.ARTICLE_ID = #{articleId}
	</select>
	
	<select id="selectFeedCommentList" parameterType="com.kkk26kkk.bbs.model.CommentParam" resultType="com.kkk26kkk.bbs.model.Comment">
    	SELECT	
    			Y.*
		FROM	(
					SELECT 
							Z.*
					FROM	(
						        SELECT  /*+ INDEX_DESC(C PK_TB_COMMENT) */
						        		C.COMMENT_ID
						        	  , C.ARTICLE_ID
						        	  , C.USER_ID
						        	  , C.USER_NAME
						        	  , C.REG_DTM
						        	  ,
						       	CASE	WHEN (C.USER_ID != #{userId} AND A.USER_ID != #{userId}) AND C.CODE = '20'
						       				THEN NULL
						       		 --	WHEN 신고 댓글
						       		 	ELSE C.CONTENTS
						       	END		CONTENTS
						        	  , ROW_NUMBER() OVER(PARTITION BY C.ARTICLE_ID ORDER BY C.REG_DTM DESC) AS RNUM
						        FROM	TB_COMMENT		C
						        	  , TB_ARTICLE		A
						       	WHERE	C.ARTICLE_ID	=	A.ARTICLE_ID
						        AND		C.ARTICLE_ID	IN	(
						        								SELECT 
						        										regexp_substr(#{articleId}, '[^,]+', 1, LEVEL) AS ARTICLE_ID
																FROM	DUAL
																CONNECT	BY
																		LEVEL &lt;= length(regexp_replace(#{articleId}, '[^,]+', '')) + 1
						        							) 
      						) Z
			        WHERE	Z.RNUM	&lt;=	#{endNum}
				) Y
		WHERE	Y.RNUM	&gt;=	#{startNum}
    </select>
    
    <resultMap id="commentTotalCountResultMap" type="java.util.HashMap">
        <result property="id" column="ID"/>
        <result property="totalCount" column="TOTAL_COUNT" javaType="int"/>
    </resultMap>
    
    <select id="selectCommentTotalCount" resultMap="commentTotalCountResultMap">
    	SELECT	ARTICLE_ID	AS ID
    		  , COUNT(1)	AS TOTAL_COUNT
		FROM	TB_COMMENT
		GROUP BY 
				ARTICLE_ID
    </select>
	
	<select id="getCommentSeqNextVal" resultType="String">
		SELECT 
				TB_COMMENT_SEQ.NEXTVAL
		FROM	DUAL
	</select>
</mapper>