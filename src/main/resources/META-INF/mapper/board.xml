<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Board">
    <select id="getArticleList" parameterType="com.kkk26kkk.bbs.model.ArticleParam" resultType="com.kkk26kkk.bbs.model.XArticle">
	    SELECT
	            W.*
	    FROM    (
				    SELECT
				            X.*
				    FROM    (    
						        SELECT  
						                Z.*
						              , ROWNUM RNUM
						        FROM    (
	                                        SELECT  /*+ ORDERED USE_NL(C B) INDEX(C IDX_TB_NOTICE_ARTICLEID) INDEX(B PK_TB_ARTICLE) */
	                                                B.ARTICLE_ID
						                          , B.USER_ID
						                          , B.USER_NAME
						                          , B.TITLE
						                          , B.CONTENTS
						                          , B.PARENT_ID
						                          , B.READ_COUNT
						                          , B.REG_DTM
	                                        FROM    TB_NOTICE		C
	                                              , TB_ARTICLE		B
	                                        WHERE   1               = 1
	                                        AND     SYSDATE         BETWEEN NOTICE_STT_DTM  AND NOTICE_END_DTM
	                                        AND     C.ARTICLE_ID    = B.ARTICLE_ID
	                                        
						                    UNION ALL
						                    
									        SELECT
									                Y.*
									        FROM    ( 
									                    SELECT  /*+ INDEX_DESC(A PK_TB_ARTICLE) */
									                            A.ARTICLE_ID
									                          , A.USER_ID
									                          , A.USER_NAME
									                          , A.TITLE
									                          , A.CONTENTS
									                          , A.PARENT_ID
									                          , A.READ_COUNT
									                          , A.REG_DTM
									                    FROM    TB_ARTICLE		A
	                                                <if test="sort != null">
									                    INNER JOIN -- TODO 아우터로
									                      		TB_ARTICLE_RANK R
									                   	ON		R.ARTICLE_ID 	=	A.ARTICLE_ID
	                                                </if>
									                    WHERE   1          		= 	1
									                    AND     NOT EXISTS (
		                                                                        SELECT 
		                                                                                'X'
		                                                                        FROM    TB_NOTICE
		                                                                        WHERE   ARTICLE_ID = A.ARTICLE_ID
									                                        )
									                    START WITH
									                            PARENT_ID 	IS	NULL 
									                    CONNECT BY
									                            PARENT_ID 	=	PRIOR A.ARTICLE_ID
									                    ORDER SIBLINGS BY
								                    	<choose>
								                    		<when test="sort == 'commentCount'">
								                    			(
					                                            	SELECT
					                                                		COUNT(1)
					                                                FROM	TB_COMMENT		B
					                                            	WHERE	B.ARTICLE_ID 	= A.ARTICLE_ID
					                                           	) DESC
					                                        --	R.COMMENT_COUNT_RANK DESC
								                    		</when>
								                    		<when test="sort == 'readCount'">
								                    			A.READ_COUNT DESC
									                       	--	R.READ_COUNT_RANK DESC
								                    		</when>
								                    		<when test="sort == 'popularity'">
								                    			R.POPULARITY_RANK DESC
								                    		</when>
								                    		<when test="sort == 'best'">
								                    			R.BEST_RANK DESC
								                    		</when>
								                    		<when test="sort == 'rising'">
								                    			R.RISING_RANK DESC
								                    		</when>
								                    		<otherwise>
								                    			ARTICLE_ID DESC
								                    		</otherwise>
								                    	</choose>
									                ) Y
						                ) Z
				            ) X
	                WHERE X.RNUM &lt;= #{endNum} 
	            ) W
	    WHERE W.RNUM &gt;= #{startNum}
    </select>
    
    <select id="getArticleCount" resultType="int">
        SELECT COUNT(1)
        FROM tb_article
    </select>
    
    <select id="getFeedArticleList" parameterType="com.kkk26kkk.bbs.model.ArticleParam" resultType="com.kkk26kkk.bbs.model.XArticle">
	    SELECT	
	    		X.*
	    FROM	(
				    SELECT	
				    		Y.*
				   	FROM	(
							    SELECT	
							    		Z.*
							    	  ,	ROWNUM RNUM
							    FROM	(
									    	SELECT	/*+ INDEX_DESC(A PK_TB_ARTICLE) */
									    			A.ARTICLE_ID
									    		  , A.USER_ID
									    		  , A.USER_NAME
									    		  , A.TITLE
									    		  , A.CONTENTS
									    		  , A.PARENT_ID
									    		  , A.READ_COUNT
									    		  , A.REG_DTM
									    	FROM	TB_ARTICLE		A
									    	START WITH
									                A.PARENT_ID		IS NULL
									        CONNECT BY
									                A.PARENT_ID		= PRIOR A.ARTICLE_ID
									        ORDER SIBLINGS BY
									        		A.ARTICLE_ID 	DESC
										) Z
							) Y
			        WHERE	Y.RNUM	&lt;=	#{endNum} 
				) X
		WHERE	X.RNUM	&gt;=	#{startNum}
    </select>
    
    <select id="getFeedCommentList" parameterType="com.kkk26kkk.bbs.model.CommentParam" resultType="com.kkk26kkk.bbs.model.Comment">
    	SELECT	
    			Y.*
		FROM	(
					SELECT 
							Z.*
					FROM	(
						        SELECT  /*+ INDEX_DESC(C PK_TB_COMMENT) */
						        		C.COMMENT_ID
						        	  , C.ARTICLE_ID
						        	  , C.USER_ID
						        	  , C.USER_NAME
						        	  , C.REG_DTM
						        	  ,
						       	CASE	WHEN (C.USER_ID != #{userId} AND A.USER_ID != #{userId}) AND C.CODE = '20'
						       				THEN NULL
						       		 --	WHEN 신고 댓글
						       		 	ELSE C.CONTENTS
						       	END		CONTENTS
						        	  , ROW_NUMBER() OVER(PARTITION BY C.ARTICLE_ID ORDER BY C.REG_DTM DESC) AS RNUM
						        FROM	TB_COMMENT		C
						        	  , TB_ARTICLE		A
						       	WHERE	C.ARTICLE_ID	=	A.ARTICLE_ID
						        AND		C.ARTICLE_ID	IN	(
						        								SELECT 
						        										regexp_substr(#{articleId}, '[^,]+', 1, LEVEL) AS ARTICLE_ID
																FROM	DUAL
																CONNECT	BY
																		LEVEL &lt;= length(regexp_replace(#{articleId}, '[^,]+', '')) + 1
						        							) 
      						) Z
			        WHERE	Z.RNUM	&lt;=	#{endNum}
				) Y
		WHERE	Y.RNUM	&gt;=	#{startNum}
    </select>

    <select id="getClipboardList" parameterType="com.kkk26kkk.bbs.model.ArticleParam" resultType="com.kkk26kkk.bbs.model.XArticle">
    	SELECT	
    			X.*
    	FROM	(
			    	SELECT
			    			Y.*
			    	FROM	(
						    	SELECT
						    			Z.*
						    		  , ROWNUM RNUM
						    	FROM	(
									    	SELECT	/*+ INDEX_DESC(A PK_TB_ARTICLE) */
									    			A.ARTICLE_ID
									    		  , A.USER_ID
									    		  , A.USER_NAME
									    		  , A.TITLE
									    		  , A.CONTENTS
									    		  , A.READ_COUNT
									    		  , A.REG_DTM
									    		  , CONNECT_BY_ROOT A.ARTICLE_ID AS ROOT_ID
											FROM	TB_ARTICLE	A
											WHERE	1			   =       1
											AND		USER_ID		   =       #{userId}
											AND     #{userGrade}   &gt;=   A.GRADE
											<bind name="userId" value="userId"/>
                                            <bind name="grade" value="A.GRADE"/>
											<include refid="checkPublicScope" />
											START WITH
													PARENT_ID	IS	NULL
											CONNECT BY
													PARENT_ID	=	PRIOR ARTICLE_ID
										) Z
							) Y
					WHERE Y.RNUM &lt;= #{endNum}
				) X
		WHERE X.RNUM &gt;= #{startNum}
    </select>
    
	<sql id="checkPublicScope">
	    -- TODO
	</sql>
    
    <select id="selectParentArticleList" parameterType="com.kkk26kkk.bbs.model.ArticleParam" resultType="com.kkk26kkk.bbs.model.XArticle">
		SELECT  /*+ INDEX_DESC(A PK_TB_ARTICLE) */
    			A.ARTICLE_ID
    		  , A.USER_ID
    		  , A.USER_NAME
    		  , A.TITLE
    		  , A.CONTENTS
    		  , A.READ_COUNT
    		  , A.REG_DTM
		FROM	TB_ARTICLE A
		WHERE	ARTICLE_ID IN (
		                       		SELECT 
		                        			regexp_substr(#{articleId}, '[^,]+', 1, LEVEL) AS ARTICLE_ID
		                        	FROM	DUAL
		                        	CONNECT	BY
		                            		LEVEL &lt;= length(regexp_replace(#{articleId}, '[^,]+', '')) + 1
		                      ) 
		AND     #{userGrade}  &gt;=   A.GRADE
		AND     PARENT_ID     IS NULL
    </select>
</mapper>